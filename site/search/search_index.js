const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"This wiki is up-to-date with the following BlurEngine version: Alpha 1.5.2 BlurEngine is a rather simple game engine, with a scripting API for use with Lua. With that being said, welcome to the wiki! I would like to thank everyone that has tried, or contributed any amount of testing to BlurEngine. Without you this project probably wouldn't have lasted even a few months. I especially would like to give my thanks to: Kip, Bartekrabit, brudziak and nickname2500 If you find any errors/inconsistencies in either the engine or this wiki, or just have suggestions for the wiki or the engine please contact me.","title":"Introduction"},{"location":"index.html#_1","text":"This wiki is up-to-date with the following BlurEngine version: Alpha 1.5.2 BlurEngine is a rather simple game engine, with a scripting API for use with Lua. With that being said, welcome to the wiki! I would like to thank everyone that has tried, or contributed any amount of testing to BlurEngine. Without you this project probably wouldn't have lasted even a few months. I especially would like to give my thanks to: Kip, Bartekrabit, brudziak and nickname2500 If you find any errors/inconsistencies in either the engine or this wiki, or just have suggestions for the wiki or the engine please contact me.","title":""},{"location":"api-reference/api-reference.html","text":"Welcome to the API Reference. This hopefully should contain every single thing that you would ever need to know in order to make a BlurEngine game/script. The sidebar on the left (at least on desktop), can be used to navigate to any section of this API Reference that you would like to see.","title":"API Reference"},{"location":"api-reference/globals.html","text":"This page documents all functions present directly in _G. It does not document any libraries which are available in another section. Vector Vector( number x, number y, number z (optional) ) Creates a new Vector object. The z component is optional. assert( bool v, string message ) Causes an error if v is false . If true , it returns all of it's arguments . If an error is caused, the optional argument message` is the error message. collectgarbage( string opt, any arg ) Lua has many ways it can do garbage collection. This function can invoke some of those ways. The optional argument opt corresponds to which method will be used (as specified here ). The optional argument arg is passed to the chosen garbage collection method. delay( number delay, function function ) Calls a function after a delay. Does not block the execution of Lua code. error( any message, any level ) Terminates the last protected function called and returns message as the error object. Function error never returns. table findmetatable( string name ) Retrieves a C metatable with a given name integer getBuildNumber( ) Returns the build number of the binary running this code. Can be used to 'detect' features. number getDeltaTime( ) Returns the delta (time difference) between this and last frame in seconds. integer getHeight( ) Returns the window's height (in pixels) string getVersionString( ) Returns the current build's version string, for example: Alpha 1.2.0-pre (master) integer getWidth( ) Returns the width of the game window (in pixels) metatable getmetatable( any object ) Will return nil . Will return the metatable of the object if __metatable is not present, if __metatable is present, returns the value returned by that function include( string scriptPath ) Loads a Lua script. Note that scriptPath has to be an absolute path from ./scripts/ variable ipairs( table t ) Returns three values: an iterator function, t and 0. table listblurmetatables( ) Returns a dictionary of all blur metatables (keys: names, values: metatables) function load( string chunk ) Allows for a binary chunk to be loaded into a function. log( string name, string content, LogSeverity severity ) Same as print , offers more granular control when outputting to the console. variable next( table table, number index ) Returns the next index of the table and the value at that index. If index is nil, next returns an initial index and the value at that index. If index is the last index, or the table is empty, nil is returned variable pairs( table t ) If t has the __pairs metamethod, it will call it with t as the argument and return first three results from the call. If it does not contain the metamethod, it will return the next function, t and nil . variable pcall( function f, variable args ) Calls the f in protected mode. In the case of an error, a differing status code is returned. If called without errors, the return values after the status code are f 's return values. print( variable any ) Will log any variable provided in the console. Internally will use similar behaviour tostring to convert passed variables to a string. rawequal( any object1, any object2 ) Checks if two objects specified are equal to each other without calling the __eq metamethod. any rawget( table table, any index ) Gets the value of table[index] without calling the __index metamethod. number rawlen( any v ) Returns the length of v (which is expected to a table or string) without calling the __len metamethod. rawset( table table, any index, any value ) Sets the value of table[index] without using the __newindex metamethod. module require( string path ) Loads a Lua module at a given path. May not work very well currently. It is planned to be fixed in the next patch. variable select( number index ) This function can accept any number of arguments after index. It will return all arguments whose argument index is larger than index setBackgroundColor( Color backgroundColor ) Sets the 2D view's background color. setIcon( string iconPath ) Sets the game window's icon to the image at the path given. setTitle( string title ) Sets the game window's title to the string provided. table setmetatable( table table, table metatable ) Sets the metatable for the given table. If the metatable specified is nil , the metatable is removed from the givent able. If the original metatable has a __metatable metafunction, it will cause an error. Vector toScreenVector( Vector worldVector ) This function will return the screen coordinates worldVector 's world space representation. Vector toWorldVector( Vector screenVector ) Converts a vector in screen space to a vector in world space number tonumber( object any ) A lua standard library function that attempts to convert it's argument to a number. If the passed argument cannot be converted nil is returned. string tostring( object any ) A lua standard library function that attempts to convert any type into a string for metatables it will attempt to call the metatable's __tostring metamethod. string type( object any ) Returns the type of an object, passing a Tile would return Tile . Or type(12) would return number warn( variable values ) Shows a warning where the message is all the arguments passed to this function concatenated. variable xpcall( function f, function msgh, variable args ) Calls f just like pcall , however an error will call the message handles msgh .","title":"Global Functions"},{"location":"api-reference/classes/class_Button.html","text":"A button, you press it, you get an event Properties Vector Position The on-screen position of the object Color PressedColor The color of the button while its being pressed string Text Text displayed on the button Vector Size The on-screen size of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the button while it's hovered Color Color Default color of the button Functions Button:setFont( Font font ) Sets the object's font Events onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Button"},{"location":"api-reference/classes/class_Button.html#properties","text":"Vector Position The on-screen position of the object Color PressedColor The color of the button while its being pressed string Text Text displayed on the button Vector Size The on-screen size of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the button while it's hovered Color Color Default color of the button","title":"Properties"},{"location":"api-reference/classes/class_Button.html#functions","text":"Button:setFont( Font font ) Sets the object's font","title":"Functions"},{"location":"api-reference/classes/class_Button.html#events","text":"onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Camera.html","text":"The camera","title":"Camera"},{"location":"api-reference/classes/class_CheckBox.html","text":"Warning Prior to Alpha 1.5.0, this class was called Checkbox , if scripting for an older version or simply upgrading your scripts to a newer version do ensure you catch this difference! Properties Color CheckHighlightedColor Highlighted color of the check Color CheckColor Default color of the check Color Color Default color of the checkbox Vector Size The on-screen size of the object bool Checked Determines whether the checkbox is checked bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor Highlighted color of the checkbox Vector Position The on-screen position of the object Events onCheckedChanged( bool newState ) Called when the checked state is changed onEntered( ) Called when the mouse starts hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object","title":"CheckBox"},{"location":"api-reference/classes/class_CheckBox.html#properties","text":"Color CheckHighlightedColor Highlighted color of the check Color CheckColor Default color of the check Color Color Default color of the checkbox Vector Size The on-screen size of the object bool Checked Determines whether the checkbox is checked bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor Highlighted color of the checkbox Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_CheckBox.html#events","text":"onCheckedChanged( bool newState ) Called when the checked state is changed onEntered( ) Called when the mouse starts hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Color.html","text":"A color Properties integer B The blue component (0-255) integer G The green component (0-255) integer R The red component (0-255)","title":"Color"},{"location":"api-reference/classes/class_Color.html#properties","text":"integer B The blue component (0-255) integer G The green component (0-255) integer R The red component (0-255)","title":"Properties"},{"location":"api-reference/classes/class_Font.html","text":"A font","title":"Font"},{"location":"api-reference/classes/class_GUI.html","text":"Base GUI class Properties Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI Color Color The Color of the GUI bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) Vector Position Relative location of your GUI on the screen (measured in pixels) bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. number Opacity Degree to which the GUI's background is transparent Alignment Alignment Screen Alignment (determines which corner Position corresponds to) Functions GUI:addObject( GUIObject object ) Adds an object to the GUI GUI:removeObject( GUIObject object ) Removes an object from the GUI Events onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"GUI"},{"location":"api-reference/classes/class_GUI.html#properties","text":"Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI Color Color The Color of the GUI bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) Vector Position Relative location of your GUI on the screen (measured in pixels) bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. number Opacity Degree to which the GUI's background is transparent Alignment Alignment Screen Alignment (determines which corner Position corresponds to)","title":"Properties"},{"location":"api-reference/classes/class_GUI.html#functions","text":"GUI:addObject( GUIObject object ) Adds an object to the GUI GUI:removeObject( GUIObject object ) Removes an object from the GUI","title":"Functions"},{"location":"api-reference/classes/class_GUI.html#events","text":"onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"Events"},{"location":"api-reference/classes/class_GUIObject.html","text":"The base class","title":"GUIObject"},{"location":"api-reference/classes/class_GUITexture.html","text":"A GUIObject displaying a Texture . Properties Vector Size The on-screen size of the object Vector Position The on-screen position of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Texture Texture Displayed Texture Color Color The color that will be used to tint the Texture rendered","title":"GUITexture"},{"location":"api-reference/classes/class_GUITexture.html#properties","text":"Vector Size The on-screen size of the object Vector Position The on-screen position of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Texture Texture Displayed Texture Color Color The color that will be used to tint the Texture rendered","title":"Properties"},{"location":"api-reference/classes/class_Graph.html","text":"A nice way of displaying data Properties string Title Title of the graph integer BottomValue Minimum value (y = 0) Color Color Color of the bars Vector Size The on-screen size of the object integer TopValue Maximum value (y = size.Y - padding) bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. integer DisplayedCount Max displayed data points at once Vector Position The on-screen position of the object Functions Graph:resetData( ) Resets the graph's internal data array Graph:addMarker( integer marker ) Adds a marker at a specific value Graph:addData( integer data ) Adds a data point to the graph Graph:resetMarker( ) Resets the graph's internal marker array Events onEntered( ) Called when the mouse starts hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onLeave( ) Called when the mouse stops hovering the object onReleased( ) This is called when the mouse stops clicking the object onPressed( ) This is called when the mouse clicks the object","title":"Graph"},{"location":"api-reference/classes/class_Graph.html#properties","text":"string Title Title of the graph integer BottomValue Minimum value (y = 0) Color Color Color of the bars Vector Size The on-screen size of the object integer TopValue Maximum value (y = size.Y - padding) bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. integer DisplayedCount Max displayed data points at once Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_Graph.html#functions","text":"Graph:resetData( ) Resets the graph's internal data array Graph:addMarker( integer marker ) Adds a marker at a specific value Graph:addData( integer data ) Adds a data point to the graph Graph:resetMarker( ) Resets the graph's internal marker array","title":"Functions"},{"location":"api-reference/classes/class_Graph.html#events","text":"onEntered( ) Called when the mouse starts hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onLeave( ) Called when the mouse stops hovering the object onReleased( ) This is called when the mouse stops clicking the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Label.html","text":"A way of displaying text in GUIs Properties Alignment AlignmentX Alignment of the text in the X axis Alignment AlignmentY Alignment of the text in the Y axis string Text The text displayed in the label Color Color Determines the color of the text displayed bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Size The on-screen size of the object Vector Position The on-screen position of the object Functions Label:setFont( Font font ) Sets the object's font Events onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Label"},{"location":"api-reference/classes/class_Label.html#properties","text":"Alignment AlignmentX Alignment of the text in the X axis Alignment AlignmentY Alignment of the text in the Y axis string Text The text displayed in the label Color Color Determines the color of the text displayed bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Size The on-screen size of the object Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_Label.html#functions","text":"Label:setFont( Font font ) Sets the object's font","title":"Functions"},{"location":"api-reference/classes/class_Label.html#events","text":"onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_OnCloseContext.html","text":"The context that is used in the global event onClose Functions OnCloseContext:cancel( ) This sets a flag in the context, later informing the event and engine that the window should not close","title":"OnCloseContext"},{"location":"api-reference/classes/class_OnCloseContext.html#functions","text":"OnCloseContext:cancel( ) This sets a flag in the context, later informing the event and engine that the window should not close","title":"Functions"},{"location":"api-reference/classes/class_PhysicsObject.html","text":"Base class of Tile","title":"PhysicsObject"},{"location":"api-reference/classes/class_ProgressBar.html","text":"A fancy progress bar control Properties number Percentage A value between 0 and 1 (inclusive) Vector Size The on-screen size of the object Color BackgroundColor The background color of the progress bar bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color Color Default color of the progress bar Vector Position The on-screen position of the object Events onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onPressed( ) This is called when the mouse clicks the object","title":"ProgressBar"},{"location":"api-reference/classes/class_ProgressBar.html#properties","text":"number Percentage A value between 0 and 1 (inclusive) Vector Size The on-screen size of the object Color BackgroundColor The background color of the progress bar bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color Color Default color of the progress bar Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_ProgressBar.html#events","text":"onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Ray.html","text":"A ray, if you ever were too lazy to step them yourself Properties Vector Direction Direction of the ray Vector Position World position of the ray Functions Ray:step( number distance ) Moves the ray by a distance","title":"Ray"},{"location":"api-reference/classes/class_Ray.html#properties","text":"Vector Direction Direction of the ray Vector Position World position of the ray","title":"Properties"},{"location":"api-reference/classes/class_Ray.html#functions","text":"Ray:step( number distance ) Moves the ray by a distance","title":"Functions"},{"location":"api-reference/classes/class_RoundedGUI.html","text":"A GUI, but rounded! Properties Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI bool RoundTopCorners Determines whether the top corners should be rounded Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI number Radius Size of the rounded corners number Opacity Degree to which the GUI's background is transparent Color Color The Color of the GUI bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) bool RoundBottomCorners Determines whether the bottom corners should be rounded bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Alignment Alignment Screen Alignment (determines which corner Position corresponds to) Vector Position Relative location of your GUI on the screen (measured in pixels) Functions RoundedGUI:addObject( GUIObject object ) Adds an object to the GUI RoundedGUI:removeObject( GUIObject object ) Removes an object from the GUI Events onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"RoundedGUI"},{"location":"api-reference/classes/class_RoundedGUI.html#properties","text":"Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI bool RoundTopCorners Determines whether the top corners should be rounded Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI number Radius Size of the rounded corners number Opacity Degree to which the GUI's background is transparent Color Color The Color of the GUI bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) bool RoundBottomCorners Determines whether the bottom corners should be rounded bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Alignment Alignment Screen Alignment (determines which corner Position corresponds to) Vector Position Relative location of your GUI on the screen (measured in pixels)","title":"Properties"},{"location":"api-reference/classes/class_RoundedGUI.html#functions","text":"RoundedGUI:addObject( GUIObject object ) Adds an object to the GUI RoundedGUI:removeObject( GUIObject object ) Removes an object from the GUI","title":"Functions"},{"location":"api-reference/classes/class_RoundedGUI.html#events","text":"onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"Events"},{"location":"api-reference/classes/class_ScrollPanel.html","text":"A scrollable panel, if you ever needed MORE space Properties bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Position The on-screen position of the object Vector Size The on-screen size of the object Functions ScrollPanel:addObject( GUIObject object ) Adds an object to the ScrollPanel ScrollPanel:removeObject( GUIObject object ) Removes an object from the ScrollPanel Events onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onPressed( ) This is called when the mouse clicks the object","title":"ScrollPanel"},{"location":"api-reference/classes/class_ScrollPanel.html#properties","text":"bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Position The on-screen position of the object Vector Size The on-screen size of the object","title":"Properties"},{"location":"api-reference/classes/class_ScrollPanel.html#functions","text":"ScrollPanel:addObject( GUIObject object ) Adds an object to the ScrollPanel ScrollPanel:removeObject( GUIObject object ) Removes an object from the ScrollPanel","title":"Functions"},{"location":"api-reference/classes/class_ScrollPanel.html#events","text":"onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Slider.html","text":"A slider input Properties Color PressedColor The color of the slider while its being pressed number MinValue Minimum value that can be slidered to Color Color Default color of the slider Color BackgroundHighlightedColor Highlighted color of the background number Value Current value selected by the slider Color BackgroundColor Default background color of the slider Vector Size The on-screen size of the object Vector Position The on-screen position of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the slider while it's hovered number MaxValue Maximum value that can be slidered to Events onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object onMouseMove( Vector mouseMove ) Called when the mouse moves onValueChanged( number newValue ) Called when the value is changed","title":"Slider"},{"location":"api-reference/classes/class_Slider.html#properties","text":"Color PressedColor The color of the slider while its being pressed number MinValue Minimum value that can be slidered to Color Color Default color of the slider Color BackgroundHighlightedColor Highlighted color of the background number Value Current value selected by the slider Color BackgroundColor Default background color of the slider Vector Size The on-screen size of the object Vector Position The on-screen position of the object bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the slider while it's hovered number MaxValue Maximum value that can be slidered to","title":"Properties"},{"location":"api-reference/classes/class_Slider.html#events","text":"onEntered( ) Called when the mouse starts hovering the object onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object onMouseMove( Vector mouseMove ) Called when the mouse moves onValueChanged( number newValue ) Called when the value is changed","title":"Events"},{"location":"api-reference/classes/class_Socket.html","text":"A network socket that can act as a server or client Functions Socket:listen( int backlog ) Begins listening for client connections, backlog being the length of the pending connections buffer Socket:connect( string address, number port ) Connects to a server at the specified address and port Socket Socket:accept( ) Accepts a pending client connection in a listening server socket Socket:close( ) Closes and cleans up after the socket string Socket:read( integer length ) Reads length bytes and puts them in a string and then returns the string bool Socket:endReached( ) Returns true only if End Of Stream has been reached integer Socket:bind( string address, number port ) Binds a server socket to a local address (to which clients can connect to) number Socket:available( ) Returns the number of bytes queued up to be read Socket:write( string data, integer length ) Writes data in string to the socket bool Socket:isConnected( ) Returns a bool indicating whether the socket is connected to a server/client.","title":"Socket"},{"location":"api-reference/classes/class_Socket.html#functions","text":"Socket:listen( int backlog ) Begins listening for client connections, backlog being the length of the pending connections buffer Socket:connect( string address, number port ) Connects to a server at the specified address and port Socket Socket:accept( ) Accepts a pending client connection in a listening server socket Socket:close( ) Closes and cleans up after the socket string Socket:read( integer length ) Reads length bytes and puts them in a string and then returns the string bool Socket:endReached( ) Returns true only if End Of Stream has been reached integer Socket:bind( string address, number port ) Binds a server socket to a local address (to which clients can connect to) number Socket:available( ) Returns the number of bytes queued up to be read Socket:write( string data, integer length ) Writes data in string to the socket bool Socket:isConnected( ) Returns a bool indicating whether the socket is connected to a server/client.","title":"Functions"},{"location":"api-reference/classes/class_Sound.html","text":"A sound that can spawn multiple instances of itself Properties number Pitch Pitch of the sound number Volume Volume of the sound (0-1) bool Loop Details whether the sound should loop number Pan -1 being left only, and 1 being right only, pans the sound. Functions Sound:stopAll( ) Stops all active SoundInstances SoundInstance Sound:play( ) Plays a sound, and creates a new SoundInstance","title":"Sound"},{"location":"api-reference/classes/class_Sound.html#properties","text":"number Pitch Pitch of the sound number Volume Volume of the sound (0-1) bool Loop Details whether the sound should loop number Pan -1 being left only, and 1 being right only, pans the sound.","title":"Properties"},{"location":"api-reference/classes/class_Sound.html#functions","text":"Sound:stopAll( ) Stops all active SoundInstances SoundInstance Sound:play( ) Plays a sound, and creates a new SoundInstance","title":"Functions"},{"location":"api-reference/classes/class_SoundInstance.html","text":"An individual instance of a sound that can be controlled Properties bool Paused If enabled, allows for the sound to be stopped temporarily number Pitch Pitch of the sound number Volume Volume of the sound (0-1) bool Loop Details whether the sound should loop number Pan -1 being left only, and 1 being right only, pans the sound. Functions SoundInstance:stop( ) Stops the specific SoundInstance SoundInstance:isPlaying( ) Returns false if the object stopped playing of if Paused equals true . If Paused is false and isPlaying returns false , you must create a new SoundInstance in order to start playing the audio again.","title":"SoundInstance"},{"location":"api-reference/classes/class_SoundInstance.html#properties","text":"bool Paused If enabled, allows for the sound to be stopped temporarily number Pitch Pitch of the sound number Volume Volume of the sound (0-1) bool Loop Details whether the sound should loop number Pan -1 being left only, and 1 being right only, pans the sound.","title":"Properties"},{"location":"api-reference/classes/class_SoundInstance.html#functions","text":"SoundInstance:stop( ) Stops the specific SoundInstance SoundInstance:isPlaying( ) Returns false if the object stopped playing of if Paused equals true . If Paused is false and isPlaying returns false , you must create a new SoundInstance in order to start playing the audio again.","title":"Functions"},{"location":"api-reference/classes/class_TextBox.html","text":"A way of inputting text Properties Vector Size The on-screen size of the object Color TextColor Specifies the color of the text in the textbox string Text Text contained by the textbox Color Color Default color of the textbox bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor Highlighted color of the textbox Vector Position The on-screen position of the object Functions TextBox:setFont( Font font ) Sets the object's font TextBox:submit( ) Submits the text in the textbox, calls the submit event Events onMouseMove( Vector mouseMove ) Called when the mouse moves onSubmitted( ) Called when :submit() is called by something onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onCommand( string command ) An input is interpreted as a command when it should perform something else other than end up in an input. For example: while this TextBox is capturing input, pressing KEY_HOME will result in this event being called with HOME as the argument. onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"TextBox"},{"location":"api-reference/classes/class_TextBox.html#properties","text":"Vector Size The on-screen size of the object Color TextColor Specifies the color of the text in the textbox string Text Text contained by the textbox Color Color Default color of the textbox bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor Highlighted color of the textbox Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_TextBox.html#functions","text":"TextBox:setFont( Font font ) Sets the object's font TextBox:submit( ) Submits the text in the textbox, calls the submit event","title":"Functions"},{"location":"api-reference/classes/class_TextBox.html#events","text":"onMouseMove( Vector mouseMove ) Called when the mouse moves onSubmitted( ) Called when :submit() is called by something onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onCommand( string command ) An input is interpreted as a command when it should perform something else other than end up in an input. For example: while this TextBox is capturing input, pressing KEY_HOME will result in this event being called with HOME as the argument. onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_TextView.html","text":"A multiline label Properties Alignment AlignmentX Alignment of the text in the X axis bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Size The on-screen size of the object Color Color color of the textView Alignment AlignmentY Alignment of the text in the Y axis string Text Contents (that can contain \\n) Vector Position The on-screen position of the object Functions TextView:setFont( Font font ) Sets the object's font Events onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"TextView"},{"location":"api-reference/classes/class_TextView.html#properties","text":"Alignment AlignmentX Alignment of the text in the X axis bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector Size The on-screen size of the object Color Color color of the textView Alignment AlignmentY Alignment of the text in the Y axis string Text Contents (that can contain \\n) Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_TextView.html#functions","text":"TextView:setFont( Font font ) Sets the object's font","title":"Functions"},{"location":"api-reference/classes/class_TextView.html#events","text":"onReleased( ) This is called when the mouse stops clicking the object onLeave( ) Called when the mouse stops hovering the object onMouseMove( Vector mouseMove ) Called when the mouse moves onEntered( ) Called when the mouse starts hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Texture.html","text":"A texture","title":"Texture"},{"location":"api-reference/classes/class_TextureButton.html","text":"A button and a GUITexture in one Properties Color TextureColor The color used to tint the TextureButton's Texture string Text Text displayed on the button Texture Texture The texture displayed Color Color Default color of the button Vector TextureSize Size of the texture (in pixels) (the texture is always centered) Vector Size The on-screen size of the object Color PressedColor The color of the button while its being pressed bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the button while it's hovered Vector Position The on-screen position of the object Functions TextureButton:setFont( Font font ) Sets the object's font Events onMouseMove( Vector mouseMove ) Called when the mouse moves onReleased( ) This is called when the mouse stops clicking the object onEntered( ) Called when the mouse starts hovering the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object","title":"TextureButton"},{"location":"api-reference/classes/class_TextureButton.html#properties","text":"Color TextureColor The color used to tint the TextureButton's Texture string Text Text displayed on the button Texture Texture The texture displayed Color Color Default color of the button Vector TextureSize Size of the texture (in pixels) (the texture is always centered) Vector Size The on-screen size of the object Color PressedColor The color of the button while its being pressed bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Color HighlightedColor The color of the button while it's hovered Vector Position The on-screen position of the object","title":"Properties"},{"location":"api-reference/classes/class_TextureButton.html#functions","text":"TextureButton:setFont( Font font ) Sets the object's font","title":"Functions"},{"location":"api-reference/classes/class_TextureButton.html#events","text":"onMouseMove( Vector mouseMove ) Called when the mouse moves onReleased( ) This is called when the mouse stops clicking the object onEntered( ) Called when the mouse starts hovering the object onLeave( ) Called when the mouse stops hovering the object onPressed( ) This is called when the mouse clicks the object","title":"Events"},{"location":"api-reference/classes/class_Tile.html","text":"A tile Properties number Density Affects how much velocity is transferred to it in a collision Vector Static Determines if it's velocity/acceleration can be changed or altered by the environment Vector Velocity The rate of change of position TextureMode TextureMode Display mode of the texture Texture Texture The rendered texture Vector VelocityCeiling The highest velocity can go Vector Acceleration The rate of change of velocity Vector TextureSize Size of the texture, works when tiled bool CollisionsEnabled Whether or not the collision system acts on the tiles (onCollide will still be called if false) Vector Size The world size of the Tile Vector VelocityFloor The lowest velocity can go Color Color The color that the Tile can be tinted with number Friction When moving against another tile, a force diminishing the current velocity will be accounted for, scaled by this property Vector Position Where in the world the vector is located Events onCollision( Tile tile, Vector collisionNormal ) Called when a tile collides with another tile","title":"Tile"},{"location":"api-reference/classes/class_Tile.html#properties","text":"number Density Affects how much velocity is transferred to it in a collision Vector Static Determines if it's velocity/acceleration can be changed or altered by the environment Vector Velocity The rate of change of position TextureMode TextureMode Display mode of the texture Texture Texture The rendered texture Vector VelocityCeiling The highest velocity can go Vector Acceleration The rate of change of velocity Vector TextureSize Size of the texture, works when tiled bool CollisionsEnabled Whether or not the collision system acts on the tiles (onCollide will still be called if false) Vector Size The world size of the Tile Vector VelocityFloor The lowest velocity can go Color Color The color that the Tile can be tinted with number Friction When moving against another tile, a force diminishing the current velocity will be accounted for, scaled by this property Vector Position Where in the world the vector is located","title":"Properties"},{"location":"api-reference/classes/class_Tile.html#events","text":"onCollision( Tile tile, Vector collisionNormal ) Called when a tile collides with another tile","title":"Events"},{"location":"api-reference/classes/class_TileRenderer.html","text":"The tile renderer class, it's job is pretty easy, though it may require a lot of parameters Functions TileRenderer:renderTileRotated( Texture texture, Color color, Vector position, Vector size, Vector textureSize, bool isTextureTiled, number angleRad, number opacity ) Renders a tile just like renderTile but allows you to specify the rotation about it's center TileRenderer:renderTile( Texture texture, Color color, Vector position, Vector size, Vector textureSize, bool isTextureTiled, number opacity ) Renders a tile, without the tile object. Please ensure opacity is a number that is 0-1","title":"TileRenderer"},{"location":"api-reference/classes/class_TileRenderer.html#functions","text":"TileRenderer:renderTileRotated( Texture texture, Color color, Vector position, Vector size, Vector textureSize, bool isTextureTiled, number angleRad, number opacity ) Renders a tile just like renderTile but allows you to specify the rotation about it's center TileRenderer:renderTile( Texture texture, Color color, Vector position, Vector size, Vector textureSize, bool isTextureTiled, number opacity ) Renders a tile, without the tile object. Please ensure opacity is a number that is 0-1","title":"Functions"},{"location":"api-reference/classes/class_Vector.html","text":"A vector helper class, with some math functions to make your life easier Properties number Y Z dimension component number X X dimension component number Z Y dimension component Functions number Vector:magnitude( ) Calculates the magnitude of the vector Vector Vector:abs( ) Returns a new vector with all it's components being absolute values of this vector's components Vector Vector:normalize( ) Returns a normalized vector Vector Vector:min( Vector otherVector ) Returns a new vector with each of the components being the lowest from this vector and otherVector Vector Vector:max( Vector otherVector ) Returns a new vector with each of the components being the highest from this vector and otherVector","title":"Vector"},{"location":"api-reference/classes/class_Vector.html#properties","text":"number Y Z dimension component number X X dimension component number Z Y dimension component","title":"Properties"},{"location":"api-reference/classes/class_Vector.html#functions","text":"number Vector:magnitude( ) Calculates the magnitude of the vector Vector Vector:abs( ) Returns a new vector with all it's components being absolute values of this vector's components Vector Vector:normalize( ) Returns a normalized vector Vector Vector:min( Vector otherVector ) Returns a new vector with each of the components being the lowest from this vector and otherVector Vector Vector:max( Vector otherVector ) Returns a new vector with each of the components being the highest from this vector and otherVector","title":"Functions"},{"location":"api-reference/classes/class_WindowGUI.html","text":"The most complex GUI yet - the WindowGUI, comes with it's own WindowDragger and ResizeDragger Properties string Title The window's displayed title Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI Color Color The Color of the GUI Alignment Alignment Screen Alignment (determines which corner Position corresponds to) number Opacity Degree to which the GUI's background is transparent bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) Color DraggerColor The color of the window dragger bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI Vector Position Relative location of your GUI on the screen (measured in pixels) Functions WindowGUI:addObject( GUIObject object ) Adds an object to the GUI WindowGUI:setExitVisible( bool newState ) Changes the visibility of the window's exit button WindowGUI:removeObject( GUIObject object ) Removes an object from the GUI Events onClosed( ) Called when the window is closed (GUI is unregistered) onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"WindowGUI"},{"location":"api-reference/classes/class_WindowGUI.html#properties","text":"string Title The window's displayed title Vector MinSize The theoretical minimum size of the GUI, only used with objects that may resize the GUI Color Color The Color of the GUI Alignment Alignment Screen Alignment (determines which corner Position corresponds to) number Opacity Degree to which the GUI's background is transparent bool BlurBackground Determines whether the background of the GUI should be blurred Vector Size The size of the GUI on the screen (measured with pixels) Color DraggerColor The color of the window dragger bool Visible Determines whether the given object is drawn or not. Invisible objects cannot be interacted with. Vector MaxSize Only used with ResizeDragger , the 'theoretical maximum size' of your GUI Vector Position Relative location of your GUI on the screen (measured in pixels)","title":"Properties"},{"location":"api-reference/classes/class_WindowGUI.html#functions","text":"WindowGUI:addObject( GUIObject object ) Adds an object to the GUI WindowGUI:setExitVisible( bool newState ) Changes the visibility of the window's exit button WindowGUI:removeObject( GUIObject object ) Removes an object from the GUI","title":"Functions"},{"location":"api-reference/classes/class_WindowGUI.html#events","text":"onClosed( ) Called when the window is closed (GUI is unregistered) onResize( Vector oldSize, Vector newSize ) Called when the GUI is resized. onUnfocused( ) Called when the GUI is no longer focused. onFocused( ) Called when the GUI is focused.","title":"Events"},{"location":"api-reference/classes/class_WorldObject.html","text":"Base class of PhysicsObject","title":"WorldObject"},{"location":"api-reference/enums/enum_Alignment.html","text":"Used in GUIs to specify to which side something should be aligned to ALIGN_BOTTOM Constant: 4 ALIGN_CENTER Constant: 2 ALIGN_LEFT Constant: 1 ALIGN_RIGHT Constant: 0 ALIGN_TOP Constant: 3","title":"Alignment"},{"location":"api-reference/enums/enum_BLF%20Property%20Type.html","text":"This enum is used only in BLF definitions, when you have to specify where an attribute will be saved to BLF_ACCESSFUNCTION Constant: 1 TThis value indicates that the attribute, upon load, will funnel it's data to a getter/setter you can specify BLF_ACCESSPROPERTY Constant: 0 This value indicates that the attribute, when loaded, should be plainly put into the output object table","title":"BLF Property Type"},{"location":"api-reference/enums/enum_BLF.html","text":"This enum is used in BLF to specify what exact type an object should be saved as BLF_BOOL Constant: 4 BLF_DOUBLE Constant: 8 BLF_FLOAT Constant: 2 BLF_INT Constant: 1 BLF_LONG Constant: 64 BLF_NULL Constant: 0 BLF_OBJECTREFERENCE Constant: 32 This is no longer used BLF_STRING Constant: 16","title":"BLF"},{"location":"api-reference/enums/enum_Key.html","text":"The enum used in key related events Warning The values given currently differ depending on platform. The values listed on this page correspond to the values you would see on desktop blur, however they are entirely different for Android. BUTTON_PRESS Constant: 1 This value is used when a key has just been pressed BUTTON_RELEASE Constant: 0 This value is used when a key has just been released BUTTON_REPEAT Constant: 2 This value is used when a key has been held down for some time KEY_0 Constant: 48 KEY_1 Constant: 49 KEY_2 Constant: 50 KEY_3 Constant: 51 KEY_4 Constant: 52 KEY_5 Constant: 53 KEY_6 Constant: 54 KEY_7 Constant: 55 KEY_8 Constant: 56 KEY_9 Constant: 57 KEY_A Constant: 65 KEY_APOSTROPHE Constant: 39 KEY_B Constant: 66 KEY_BACKSLASH Constant: 92 KEY_BACKSPACE Constant: 259 KEY_C Constant: 67 KEY_CAPS_LOCK Constant: 280 KEY_COMMA Constant: 44 KEY_D Constant: 68 KEY_DELETE Constant: 261 KEY_DOWN Constant: 264 KEY_E Constant: 69 KEY_END Constant: 269 KEY_ENTER Constant: 257 KEY_EQUAL Constant: 61 KEY_ESCAPE Constant: 256 KEY_F Constant: 70 KEY_F1 Constant: 290 KEY_F10 Constant: 299 KEY_F11 Constant: 300 KEY_F12 Constant: 301 KEY_F13 Constant: 302 KEY_F14 Constant: 303 KEY_F15 Constant: 304 KEY_F16 Constant: 305 KEY_F17 Constant: 306 KEY_F18 Constant: 307 KEY_F19 Constant: 308 KEY_F2 Constant: 291 KEY_F20 Constant: 309 KEY_F21 Constant: 310 KEY_F22 Constant: 311 KEY_F23 Constant: 312 KEY_F24 Constant: 313 KEY_F25 Constant: 314 KEY_F3 Constant: 292 KEY_F4 Constant: 293 KEY_F5 Constant: 294 KEY_F6 Constant: 295 KEY_F7 Constant: 296 KEY_F8 Constant: 297 KEY_F9 Constant: 298 KEY_G Constant: 71 KEY_GRAVE_ACCENT Constant: 96 KEY_H Constant: 72 KEY_HOME Constant: 268 KEY_I Constant: 73 KEY_INSERT Constant: 260 KEY_J Constant: 74 KEY_K Constant: 75 KEY_KP_0 Constant: 320 KEY_KP_1 Constant: 321 KEY_KP_2 Constant: 322 KEY_KP_3 Constant: 323 KEY_KP_4 Constant: 324 KEY_KP_5 Constant: 325 KEY_KP_6 Constant: 326 KEY_KP_7 Constant: 327 KEY_KP_8 Constant: 328 KEY_KP_9 Constant: 329 KEY_KP_ADD Constant: 334 KEY_KP_DECIMAL Constant: 330 KEY_KP_DIVIDE Constant: 331 KEY_KP_ENTER Constant: 335 KEY_KP_EQUAL Constant: 336 KEY_KP_MULTIPLY Constant: 332 KEY_KP_SUBTRACT Constant: 333 KEY_L Constant: 76 KEY_LEFT Constant: 263 KEY_LEFT_ALT Constant: 342 KEY_LEFT_BRACKET Constant: 91 KEY_LEFT_CONTROL Constant: 341 KEY_LEFT_SHIFT Constant: 340 KEY_LEFT_SUPER Constant: 343 KEY_M Constant: 77 KEY_MENU Constant: 348 KEY_MINUS Constant: 45 KEY_N Constant: 78 KEY_NUM_LOCK Constant: 282 KEY_O Constant: 79 KEY_P Constant: 80 KEY_PAGE_DOWN Constant: 267 KEY_PAGE_UP Constant: 266 KEY_PAUSE Constant: 284 KEY_PERIOD Constant: 46 KEY_PRINT_SCREEN Constant: 283 KEY_Q Constant: 81 KEY_R Constant: 82 KEY_RIGHT Constant: 262 KEY_RIGHT_ALT Constant: 346 KEY_RIGHT_BRACKET Constant: 93 KEY_RIGHT_CONTROL Constant: 345 KEY_RIGHT_SHIFT Constant: 344 KEY_RIGHT_SUPER Constant: 347 KEY_S Constant: 83 KEY_SCROLL_LOCK Constant: 281 KEY_SEMICOLON Constant: 59 KEY_SLASH Constant: 47 Forward Slash KEY_SPACE Constant: 32 KEY_T Constant: 84 KEY_TAB Constant: 258 KEY_U Constant: 85 KEY_UP Constant: 265 KEY_V Constant: 86 KEY_W Constant: 87 KEY_WORLD_1 Constant: 161 Non-US Key 1 KEY_WORLD_2 Constant: 162 Non-US Key 2 KEY_X Constant: 88 KEY_Y Constant: 89 KEY_Z Constant: 90 MOD_ALT Constant: 4 Can be used to determine whether alt was being held down at the time of an input MOD_CAPS_LOCK Constant: 16 Can be used to determine whether capslock was on at the time of an input MOD_CONTROL Constant: 2 Can be used to determine whether control was being held down at the time of an input MOD_NUM_LOCK Constant: 32 Can be used to determine whether numlock was on at the time of an input MOD_SHIFT Constant: 1 Can be used to determine whether shift was being held down at the time of an input MOD_SUPER Constant: 8 Can be used to determine whether the super key (windows/command key) was being held down at the time of an input MOUSE_BUTTON_1 Constant: 0 Corresponds to the left mouse button MOUSE_BUTTON_2 Constant: 1 Corresponds to the right mouse button MOUSE_BUTTON_3 Constant: 2 Corresponds to a middle click MOUSE_BUTTON_4 Constant: 3 Corresponds to one of the additional buttons a mouse may or may not have MOUSE_BUTTON_5 Constant: 4 Corresponds to one of the additional buttons a mouse may or may not have MOUSE_BUTTON_6 Constant: 5 Corresponds to one of the additional buttons a mouse may or may not have MOUSE_BUTTON_7 Constant: 6 Corresponds to one of the additional buttons a mouse may or may not have MOUSE_BUTTON_8 Constant: 7 Corresponds to one of the additional buttons a mouse may or may not have","title":"Key"},{"location":"api-reference/enums/enum_Log.html","text":"Used with the function log , it tells the engine the severity of your log message. It currently is only used to pick the color used for that message. LOG_ERROR Constant: 2 Yields a red background around the log subject LOG_FATAL Constant: 3 Results in a slightly darker red around the log subject LOG_INFO Constant: 1 Ends up being bright blue around the log subject LOG_VERBOSE Constant: 0 Results in a slightly darker blue around the log subject than LOG_INFO LOG_WARNING Constant: 4 Results in a yellow background around the log subject","title":"Log"},{"location":"api-reference/enums/enum_TextureMode.html","text":"Currently used exclusively for Tiles. It is used to tell the Tile shader how the texture should be treated TEXTUREMODE_STRETCH Constant: 0 TEXTUREMODE_TILE Constant: 1","title":"TextureMode"},{"location":"api-reference/events/event_doPhysics.html","text":"This event is called before the engine's physics are resolved. doPhysics( )","title":"doPhysics"},{"location":"api-reference/events/event_mouseClick.html","text":"Called by the engine when the mouse is clicked on the screen. The argument clickingGUI is only true when a mouse click happened over a GUI. mouseClick( number key, number action, number mods, bool clickingGUI )","title":"mouseClick"},{"location":"api-reference/events/event_mouseMove.html","text":"Is called when the mouse cursor moves over the screen. The argument overGUI is only true when the mouse moved over a GUI. mouseMove( number x, number y, bool overGUI )","title":"mouseMove"},{"location":"api-reference/events/event_mouseScroll.html","text":"Is called when the mouse cursor scrolls over the screen. The argument overGUI is only true when the mouse scrolled over a GUI. mouseScroll( number x, number y, bool overGUI )","title":"mouseScroll"},{"location":"api-reference/events/event_onClose.html","text":"This event is called when the engine window is about to be closed. This action can be surpressed by calling context:cancel() . onClose( OnCloseContext context )","title":"onClose"},{"location":"api-reference/events/event_passiveInput.html","text":"This event is called when a certain key is pressed/released/repeated. The arguments key and action use the Key enums. passiveInput( number key, number action )","title":"passiveInput"},{"location":"api-reference/events/event_playerCollision.html","text":"This event is an equivalent of tile:onCollision Warning This event is deprecated and never used although it is still defined as of Alpha 1.5.0 playerCollision( Tile otherTile, Vector normal )","title":"playerCollision"},{"location":"api-reference/events/event_postRender.html","text":"This event is called after the world has been drawn. postRender( TileRenderer tileRenderer )","title":"postRender"},{"location":"api-reference/events/event_render.html","text":"This event is called before the world has been drawn. render( TileRenderer tileRenderer )","title":"render"},{"location":"api-reference/events/event_screenResize.html","text":"This event is called when the engine window is resized. screenResize( number newWidth, number newHeight )","title":"screenResize"},{"location":"api-reference/libraries/library_BLF.html","text":"A library for I/O using blur's own format: BLF, which allows for object definition and a few optimizations of how data is stored.n Note Functions in this library only operate within the ./saves/ directory. table findSaves( ) Returns a list of all BLF files that blur can find/access (in it's directory) table generate( table object ) Generates a blf definition table from the object given string getVersion( ) Returns the current version of the BLF library in your blur build e.g: 1.1.0 table load( string path ) Returns a table of objects created through BLF. (loads from root dir) save( string path, any valueTable ) Saves a table of objects via BLF (note: in order to get saved, the objects have to have proper definitions, for more please view tutorials)","title":"BLF"},{"location":"api-reference/libraries/library_Camera.html","text":"Provides an interface for manipulation of blur's camera in the default World Vector getPosition( ) Returns the position of the main camera. setPosition( Vector position ) Sets the position of the main camera to position . track( Tile tile ) Will make the camera follow the given tile . When nil is passed, tracking is disabled.","title":"Camera"},{"location":"api-reference/libraries/library_Color.html","text":"Provides an interface for instantating the Color object with different color models. Color fromHSV( number hue, number saturation, number value ) Creates a new Color object with an HSV color. Color fromRGB( integer red, integer green, integer blue ) Creates a new Color object with an RGB color.","title":"Color"},{"location":"api-reference/libraries/library_Console.html","text":"This library contains utility functions for Blur's console setEnabled( bool newState ) Allows you to enable/disable the console. When disabled, '`' will no longer open the console's window.","title":"Console"},{"location":"api-reference/libraries/library_Debug.html","text":"The debug library - used to contain a few more functions before they got deprecated and eventually removed, provides a handy FPS counter if you like that. displayFramerate( bool state ) Passed state is used to indicate whether the framerate should be displayed in the top-left corner.","title":"Debug"},{"location":"api-reference/libraries/library_File.html","text":"Allows you to write/read content from the user's drive, if you do not wish to use BLF. Note Functions in this library only work within blur's core directory. Access outside of that is disallowed for security reasons. bool exists( string path ) Determines whether a given path to a file exists on the filesystem array listDir( string path ) Recursively iterates over a given directory and returns the list of files contained within string load( string path ) Loads entire file as string (path relative to blur root) save( string path, string contents ) Saves string as file (path relative to blur root)","title":"File"},{"location":"api-reference/libraries/library_Font.html","text":"A library that allows you to load system fonts into blur Font load( string fontName, integer fontSize ) Loads the font from the given font file e.g arial.ttf and the size (in pt) e.g 32","title":"Font"},{"location":"api-reference/libraries/library_GUI.html","text":"Contains all the functions required for your GUI-creation needs GUI new( string type ) Instantiates a class deriving from GUI corresponding to the string GUIObject newObject( string type ) Instantiates a class deriving from GUIObject corresponding to the string (exception: Texture will instantiate GUITexture) register( GUI gui ) Adds a GUI to the base container (effectively, makes it visible on the screen) unregister( GUI gui ) Removes a GUI from the base container (effectively removes it from the screen)","title":"GUI"},{"location":"api-reference/libraries/library_Mouse.html","text":"The library that handles everything that is to do with the mouse Vector getPosition( ) Retrieves the screen position of the mouse cursor Tile getTarget( ) Retrieves the tile that the mouse is currently hovering over setTexture( Texture newTexture ) Sets the texture used by the mouse","title":"Mouse"},{"location":"api-reference/libraries/library_Ray.html","text":"Library for the production of the Ray object Ray new( Vector position, Vector direction ) Creates a new Ray object","title":"Ray"},{"location":"api-reference/libraries/library_Socket.html","text":"This is the socket library, currently only contains a single function, for the creation of a network socket Socket new( ) Creates a new network socket","title":"Socket"},{"location":"api-reference/libraries/library_Sound.html","text":"Library for creating Sound objects load( String path ) Loads an audio file from a path (relative to ./ ) and turns it into a Sound object","title":"Sound"},{"location":"api-reference/libraries/library_Texture.html","text":"The library that is in charge of Texture instantiation Texture load( string path ) Loads a Texture, given a path (that is relative to ./content )","title":"Texture"},{"location":"api-reference/libraries/library_Tile.html","text":"The library that provides functions for manipulating tiles in blur's default World Tile new( Vector position, Texture texture ) Creates a new Tile remove( Tile tile ) Removes from the world and disposes of a Tile object","title":"Tile"},{"location":"api-reference/libraries/library_event.html","text":"Event library, in charge of everything to do with events. call( string eventID, varargs eventArgs ) Calls all functions registered to the event with provided eventArgs link( string eventID, string functionID, function eventFunction ) Adds a function, with it's own identifier to an event's function pool, so that it can be called when the event is called. register( string eventID ) Registers an event name to blur's event manager.","title":"event"},{"location":"api-reference/libraries/library_math.html","text":"Contains maths functions and constants for your convenience number abs( number x ) Returns the absolute value of a given number. number acos( number x ) Returns the arc cosine of a given value (x is assumed to be in radians) number asin( number x ) Returns the arcsine of x in radians number atan( number y, number x ) Equivalent to atan2 in most languages. Returns the arctangent of y/x. This operation is done in radians number ceil( number x ) Rounds up to the nearest integer number clamp( number value, number min, number max ) Clamps value between min and max number cos( number x ) Returns the cosine of x (which is assumed to be in radians) number deg( number angRad ) Converts a given value (assumed to be in radians) to degrees number exp( number x ) Returns the value of e^x number floor( number x ) Rounds down a given number to the nearest integer. number fmod( number x, number y ) Returns the remainder of the division of x by y huge Constant: inf A float with the largest possible numeric value number log( number x, number base ) Returns the logarithm of x in a given base. The argument base is optional (and defaults to e if not specified) number max( variable numbers ) Returns the highest number between all the arguments. A variable amount of arguments may be passed to this function maxinteger Constant: 9223372036854775807 An integer with the largest possible value number min( variable numbers ) Returns the lowest number between all the arguments. A variable amount of arguments may be passed to this function mininteger Constant: -9223372036854775808 An integer with the lowest possible value numbers modf( number x ) Returns the integral part of x and the fractional part of x . The second result is always a float pi Constant: 3.1415926535898 Contains the value of PI number rad( number angDeg ) This function converts the given angle (assumed to be in degrees) to radians number random( number m, number n ) If no arguments are specified, it returns a number between 0 and 1. If m and n are specified, it will return a number between m and n. randomseed( number x, number y ) Initializes Lua's pseudo-random number generator with the given value. If y is specified, it is combined with x into one number that is then used as the seed for the PRNG. integer round( number value ) Rounds a value to the nearest integer number sin( number x ) Calculates the sine of x , x is assumed to be in radians number sqrt( number x ) Calculates the square root of x number tan( number x ) Returns the tangent of x (assumed to be in radians) integer tointeger( number x ) Turns a number into an integer. If value that is not a number is specified, it returns fail. string type( number x ) Returns \"integer\" if a given number is an integer, \"float\" if the value is a float or nil otherwise bool ult( number m, number n ) Returns true if m < n when m and n are compared as unsigned integers","title":"math"},{"location":"api-reference/libraries/library_os.html","text":"Exposes some OS level functions close( integer code ) Closes the program, with the specified error code (0 means no errors) date( string format, number time ) This returns the system time in a nice human readable format. All arguments are optional integer time( ) Returns system time in the form of a long integer","title":"os"},{"location":"api-reference/libraries/library_string.html","text":"This is a standard Lua library that aids with string manipulation numbers byte( string s, number startIndex, number endIndex ) Returns numeric codes of characters between given indices in a string. Both startIndex and endIndex are entirely optional arguments. string char( variable values ) Takes an arbitrary amount of number arguments. It returns a string with each character's code corresponding to the argument given string dump( function function, bool strip ) Returns a string containing the binary representation of a given function. If strip is specified and is set to true, the binary output may not have all debug information numbers find( string s, string pattern, number i, bool plain ) Both i and plain are optional arguments. This function searches string s for pattern , starting from i (assumed to be 1 if not specified). If plain is specified and true then no special pattern matching is done and this function simply searches for pattern in the string. The start and end of the first found occurence are returned. Pattern matching is done according to the section here . string format( string fmt ) Formats a string in the same fashion as C's sprintf would. Any number of variables after fmt may be passed. function gmatch( ) Returns an interator function that returns the next capture from the pattern each time it is called. The pattern specification is here . string gsub( string s, string pattern, any repl, number n ) To understand how this function works, I recommend you read this . number len( string s ) Returns the length of a given string. string lower( string string ) Returns a copy of the string given with all possible letters set to lowercase. match( string s, string pattern, number index ) Searches the string for the first match of a given pattern. Starts from the optional index . Rules of format are here string pack( string fmt, variable values ) Many variables may be specified after fmt . The function returns a binary string containing all the values but serialized. The format used for fmt can be found here number packsize( string format ) Returns the size of a string that would result from a given format string rep( string s, integer n, string sep ) Returns a string that is the concatenation of n copies of string s separated by sep (which is optional, and if missing is assumed to be an empty string) string reverse( string string ) Returns a reversed copy of a given string string sub( string string, number i, number j ) Returns a substring between i and j . The argument j is optional number unpack( string fmt, string s, integer pos ) Returns values packed in string s, according to string.pack , and format string fmt . The optional argument pos specifies where to start reading from (1 by default). string upper( string string ) Returns a copy of this string with all the letters turned uppercase.","title":"string"},{"location":"api-reference/libraries/library_table.html","text":"This default Lua library contains additional functions that help with table manipulation string concat( table table, string sep, number i, number j ) Concatenates all elements in a given table into a string. All arguments after table are optional. sep is the separator between each entry, while i and j are the start and end bounds between which all elements will be concatenated into a string. insert( table list, number pos, any value ) This function inserts a value into a table at a specified pos . The pos is an optional argument and if not specified, the function assumes that pos is at the end of the table. table move( table table1, number startIndex, number endIndex, number otherStart, table table2 ) Returns table2. It moves elements from table1 (between startIndex and endIndex ) to table2 (from otherStart onwards), table2 is an optional argument, and if not specified, table2 is assumed to be table1 . table pack( variable any ) This function accepts any number of arguments. It will then create and return a new table containing all of these arguments. remove( table table, number index ) Removes an element from a table at a given index. The index is optional, and if not specified it defaults to the end of the table. This function modifies the table passed and therefore does not modify anything. sort( table table, function sort ) This function sorts a table. It modifies the table specified and therefore does not return anything. It also accepts an optional argument sort which should be a function taking two arguments that is able to sort the table. More information on how this function works can be found here variable unpack( table list, number start, number end ) Returns the elements in the list. The arguments start and end are optional.","title":"table"},{"location":"tutorials/index.html","text":"Tutorials Whether this is your first time using BlurEngine or you're attempting to get started with new features, I hope these tutorials will be of use to you. These tutorials will be split into sections, and beginners are advised to start at first tutorial of each section. GUIs Creating your first GUI","title":"Tutorials"},{"location":"tutorials/index.html#tutorials","text":"Whether this is your first time using BlurEngine or you're attempting to get started with new features, I hope these tutorials will be of use to you. These tutorials will be split into sections, and beginners are advised to start at first tutorial of each section. GUIs Creating your first GUI","title":"Tutorials"},{"location":"tutorials/gui-basics.html","text":"GUI Basics GUIs in BlurEngine may seem complicated at first, but it is quite simple once you get the hang of it. It is limited to manually setting the positioning and sizes yourself in the code. Introduction GUIs are divided into GUI and GUIObject classes. All GUIs work using a centralized system. This means that for every part of your interface you wish to implement there is 1 GUI class object which serves as a parent to 1 or more GUIObject class children. You can have multiple GUIs in a BlurEngine instance. Making the GUIs Every GUI needs to be instantiated using gui.new() or gui.newObject() . You will also need to set its size and position. To see all kinds of GUIs and GUIObjects, look up GUI and GUIObject . Here is a code example demonstarting this, where we will be making a simple button and text script: mainGUI = gui . new ( \"GUI\" ) mainGUI . Position = Vector ( 300 , 300 ) mainGUI . Size = Vector ( 200 , 200 ) titleGUI = gui . newObject ( \"Label\" ) titleGUI . Position = Vector ( 60 , 150 ) titleGUI . Size = Vector ( 100 , 50 ) titleGUI . Text = \"Cool button\" buttonGUI = gui . newObject ( \"Button\" ) buttonGUI . Position = Vector ( 25 , 50 ) buttonGUI . Size = Vector ( 150 , 75 ) buttonGUI . Text = \"Click me!\" Initializing the GUIs If we run the code above, nothing will happen. Why? It's because we haven't initialized the GUIs properly. To do that, the function gui.register() and the GUI method :addObject() . If we would like to hide a gui, we can do this using the gui.unregister() function. Here's how we do it: mainGUI : addObject ( titleGUI ) mainGUI : addObject ( buttonGUI ) -- Adds the title GUIObject and the button GUIObject to the main GUI class object. gui . register ( mainGUI ) -- This will make mainGUI and its objects render/appear in game view. Simple, right? Here's the result of our code: This is a basic GUI, you can't interact with it yet and it doesn't look too pretty. To see how to do other things like changing fonts or adding button functions, check out the GUI class.","title":"Introduction to GUI"},{"location":"tutorials/gui-basics.html#gui-basics","text":"GUIs in BlurEngine may seem complicated at first, but it is quite simple once you get the hang of it. It is limited to manually setting the positioning and sizes yourself in the code.","title":"GUI Basics"},{"location":"tutorials/gui-basics.html#introduction","text":"GUIs are divided into GUI and GUIObject classes. All GUIs work using a centralized system. This means that for every part of your interface you wish to implement there is 1 GUI class object which serves as a parent to 1 or more GUIObject class children. You can have multiple GUIs in a BlurEngine instance.","title":"Introduction"},{"location":"tutorials/gui-basics.html#making-the-guis","text":"Every GUI needs to be instantiated using gui.new() or gui.newObject() . You will also need to set its size and position. To see all kinds of GUIs and GUIObjects, look up GUI and GUIObject . Here is a code example demonstarting this, where we will be making a simple button and text script: mainGUI = gui . new ( \"GUI\" ) mainGUI . Position = Vector ( 300 , 300 ) mainGUI . Size = Vector ( 200 , 200 ) titleGUI = gui . newObject ( \"Label\" ) titleGUI . Position = Vector ( 60 , 150 ) titleGUI . Size = Vector ( 100 , 50 ) titleGUI . Text = \"Cool button\" buttonGUI = gui . newObject ( \"Button\" ) buttonGUI . Position = Vector ( 25 , 50 ) buttonGUI . Size = Vector ( 150 , 75 ) buttonGUI . Text = \"Click me!\"","title":"Making the GUIs"},{"location":"tutorials/gui-basics.html#initializing-the-guis","text":"If we run the code above, nothing will happen. Why? It's because we haven't initialized the GUIs properly. To do that, the function gui.register() and the GUI method :addObject() . If we would like to hide a gui, we can do this using the gui.unregister() function. Here's how we do it: mainGUI : addObject ( titleGUI ) mainGUI : addObject ( buttonGUI ) -- Adds the title GUIObject and the button GUIObject to the main GUI class object. gui . register ( mainGUI ) -- This will make mainGUI and its objects render/appear in game view. Simple, right? Here's the result of our code: This is a basic GUI, you can't interact with it yet and it doesn't look too pretty. To see how to do other things like changing fonts or adding button functions, check out the GUI class.","title":"Initializing the GUIs"}]}; var __search = { index: Promise.resolve(local_index) }